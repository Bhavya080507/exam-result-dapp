#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    bytecblock "student" "marks"
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/hello_world/contract.algo.ts:4
    // student = GlobalState<string>({ key: "student", initialValue: "none" })
    bytec_0 // "student"
    pushbytes "none"
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:5
    // marks = GlobalState<uint64>({ key: "marks", initialValue: 0 })
    bytec_1 // "marks"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class ExamResult extends Contract {
    txn NumAppArgs
    bz main_bare_routing@8
    pushbytes 0xfc92d2aa // method "setResult(string,uint64)string"
    txna ApplicationArgs 0
    match main_setResult_route@5

main_after_if_else@12:
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class ExamResult extends Contract {
    intc_0 // 0
    return

main_setResult_route@5:
    // smart_contracts/hello_world/contract.algo.ts:7
    // setResult(name: string, score: uint64): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class ExamResult extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // smart_contracts/hello_world/contract.algo.ts:7
    // setResult(name: string, score: uint64): string {
    callsub setResult
    dup
    len
    itob
    extract 6 2
    swap
    concat
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@8:
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class ExamResult extends Contract {
    txn OnCompletion
    bnz main_after_if_else@12
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// smart_contracts/hello_world/contract.algo.ts::ExamResult.setResult(name: bytes, score: uint64) -> bytes:
setResult:
    // smart_contracts/hello_world/contract.algo.ts:7
    // setResult(name: string, score: uint64): string {
    proto 2 1
    // smart_contracts/hello_world/contract.algo.ts:4
    // student = GlobalState<string>({ key: "student", initialValue: "none" })
    bytec_0 // "student"
    // smart_contracts/hello_world/contract.algo.ts:8
    // this.student.value = name
    frame_dig -2
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:5
    // marks = GlobalState<uint64>({ key: "marks", initialValue: 0 })
    bytec_1 // "marks"
    // smart_contracts/hello_world/contract.algo.ts:9
    // this.marks.value = score
    frame_dig -1
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:10
    // return "Result saved for " + name
    pushbytes "Result saved for "
    frame_dig -2
    concat
    retsub
